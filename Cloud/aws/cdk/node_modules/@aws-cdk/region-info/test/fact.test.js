"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const aws_entities_1 = require("../build-tools/aws-entities");
const lib_1 = require("../lib");
describe('find', () => {
    test('returns undefined for an unknown fact', () => {
        expect(lib_1.Fact.find(aws_entities_1.AWS_REGIONS[0], 'not:a:known:fact')).toBe(undefined);
    });
    test('returns undefined for an unknown region', () => {
        expect(lib_1.Fact.find('bermuda-triangle-42', lib_1.FactName.PARTITION)).toBe(undefined);
    });
});
describe('register', () => {
    test('allows registering an arbitrary fact', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        // THEN
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
    test('allows re-registering a fact with the same value', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
    test('disallows re-registering a fact with a different value', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = lib_1.FactName.PARTITION;
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).not.toBe(value);
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value }))
            .toThrowError(/already has a fact/);
    });
    test('allows overriding an arbitrary fact', () => {
        // GIVEN
        const region = aws_entities_1.AWS_REGIONS[0];
        const name = 'my:custom:fact';
        const value = '1337';
        // WHEN
        expect(lib_1.Fact.find(region, name)).toBe(undefined);
        expect(() => lib_1.Fact.register({ region, name, value })).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe(value);
        // THEN
        expect(() => lib_1.Fact.register({ region, name, value: 'Foo' }, true)).not.toThrowError();
        expect(lib_1.Fact.find(region, name)).toBe('Foo');
        // Cleanup
        lib_1.Fact.unregister(region, name);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjdC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZmFjdC50ZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsOERBQTBEO0FBQzFELGdDQUF3QztBQUV4QyxRQUFRLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRTtJQUNwQixJQUFJLENBQUMsdUNBQXVDLEVBQUUsR0FBRyxFQUFFO1FBQ2pELE1BQU0sQ0FBQyxVQUFJLENBQUMsSUFBSSxDQUFDLDBCQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUN4RSxDQUFDLENBQUMsQ0FBQztJQUVILElBQUksQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDbkQsTUFBTSxDQUFDLFVBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUUsY0FBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9FLENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQyxDQUFDLENBQUM7QUFFSCxRQUFRLENBQUMsVUFBVSxFQUFFLEdBQUcsRUFBRTtJQUN4QixJQUFJLENBQUMsc0NBQXNDLEVBQUUsR0FBRyxFQUFFO1FBQ2hELFFBQVE7UUFDUixNQUFNLE1BQU0sR0FBRywwQkFBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDO1FBQzlCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQztRQUVyQixPQUFPO1FBQ1AsTUFBTSxDQUFDLFVBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ2hELE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsQ0FBQyxD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QUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFNUMsT0FBTztRQUNQLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxVQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckYsTUFBTSxDQUFDLFVBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTVDLFVBQVU7UUFDVixVQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNoQyxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVdTX1JFR0lPTlMgfSBmcm9tICcuLi9idWlsZC10b29scy9hd3MtZW50aXRpZXMnO1xuaW1wb3J0IHsgRmFjdCwgRmFjdE5hbWUgfSBmcm9tICcuLi9saWInO1xuXG5kZXNjcmliZSgnZmluZCcsICgpID0+IHtcbiAgdGVzdCgncmV0dXJucyB1bmRlZmluZWQgZm9yIGFuIHVua25vd24gZmFjdCcsICgpID0+IHtcbiAgICBleHBlY3QoRmFjdC5maW5kKEFXU19SRUdJT05TWzBdLCAnbm90OmE6a25vd246ZmFjdCcpKS50b0JlKHVuZGVmaW5lZCk7XG4gIH0pO1xuXG4gIHRlc3QoJ3JldHVybnMgdW5kZWZpbmVkIGZvciBhbiB1bmtub3duIHJlZ2lvbicsICgpID0+IHtcbiAgICBleHBlY3QoRmFjdC5maW5kKCdiZXJtdWRhLXRyaWFuZ2xlLTQyJywgRmFjdE5hbWUuUEFSVElUSU9OKSkudG9CZSh1bmRlZmluZWQpO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgncmVnaXN0ZXInLCAoKSA9PiB7XG4gIHRlc3QoJ2FsbG93cyByZWdpc3RlcmluZyBhbiBhcmJpdHJhcnkgZmFjdCcsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHJlZ2lvbiA9IEFXU19SRUdJT05TWzBdO1xuICAgIGNvbnN0IG5hbWUgPSAnbXk6Y3VzdG9tOmZhY3QnO1xuICAgIGNvbnN0IHZhbHVlID0gJzEzMzcnO1xuXG4gICAgLy8gV0hFTlxuICAgIGV4cGVjdChGYWN0LmZpbmQocmVnaW9uLCBuYW1lKSkudG9CZSh1bmRlZmluZWQpO1xuICAgIGV4cGVjdCgoKSA9PiBGYWN0LnJlZ2lzdGVyKHsgcmVnaW9uLCBuYW1lLCB2YWx1ZSB9KSkubm90LnRvVGhyb3dFcnJvcigpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdChGYWN0LmZpbmQocmVnaW9uLCBuYW1lKSkudG9CZSh2YWx1ZSk7XG5cbiAgICAvLyBDbGVhbnVwXG4gICAgRmFjdC51bnJlZ2lzdGVyKHJlZ2lvbiwgbmFtZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FsbG93cyByZS1yZWdpc3RlcmluZyBhIGZhY3Qgd2l0aCB0aGUgc2FtZSB2YWx1ZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHJlZ2lvbiA9IEFXU19SRUdJT05TWzBdO1xuICAgIGNvbnN0IG5hbWUgPSAnbXk6Y3VzdG9tOmZhY3QnO1xuICAgIGNvbnN0IHZhbHVlID0gJzEzMzcnO1xuXG4gICAgLy8gV0hFTlxuICAgIGV4cGVjdChGYWN0LmZpbmQocmVnaW9uLCBuYW1lKSkudG9CZSh1bmRlZmluZWQpO1xuICAgIGV4cGVjdCgoKSA9PiBGYWN0LnJlZ2lzdGVyKHsgcmVnaW9uLCBuYW1lLCB2YWx1ZSB9KSkubm90LnRvVGhyb3dFcnJvcigpO1xuXG4gICAgLy8gVEhFTlxuICAgIGV4cGVjdCgoKSA9PiBGYWN0LnJlZ2lzdGVyKHsgcmVnaW9uLCBuYW1lLCB2YWx1ZSB9KSkubm90LnRvVGhyb3dFcnJvcigpO1xuICAgIGV4cGVjdChGYWN0LmZpbmQocmVnaW9uLCBuYW1lKSkudG9CZSh2YWx1ZSk7XG5cbiAgICAvLyBDbGVhbnVwXG4gICAgRmFjdC51bnJlZ2lzdGVyKHJlZ2lvbiwgbmFtZSk7XG4gIH0pO1xuXG4gIHRlc3QoJ2Rpc2FsbG93cyByZS1yZWdpc3RlcmluZyBhIGZhY3Qgd2l0aCBhIGRpZmZlcmVudCB2YWx1ZScsICgpID0+IHtcbiAgICAvLyBHSVZFTlxuICAgIGNvbnN0IHJlZ2lvbiA9IEFXU19SRUdJT05TWzBdO1xuICAgIGNvbnN0IG5hbWUgPSBGYWN0TmFtZS5QQVJUSVRJT047XG4gICAgY29uc3QgdmFsdWUgPSAnMTMzNyc7XG5cbiAgICAvLyBXSEVOXG4gICAgZXhwZWN0KEZhY3QuZmluZChyZWdpb24sIG5hbWUpKS5ub3QudG9CZSh2YWx1ZSk7XG5cbiAgICAvLyBUSEVOXG4gICAgZXhwZWN0KCgpID0+IEZhY3QucmVnaXN0ZXIoeyByZWdpb24sIG5hbWUsIHZhbHVlIH0pKVxuICAgICAgLnRvVGhyb3dFcnJvcigvYWxyZWFkeSBoYXMgYSBmYWN0Lyk7XG4gIH0pO1xuXG4gIHRlc3QoJ2FsbG93cyBvdmVycmlkaW5nIGFuIGFyYml0cmFyeSBmYWN0JywgKCkgPT4ge1xuICAgIC8vIEdJVkVOXG4gICAgY29uc3QgcmVnaW9uID0gQVdTX1JFR0lPTlNbMF07XG4gICAgY29uc3QgbmFtZSA9ICdteTpjdXN0b206ZmFjdCc7XG4gICAgY29uc3QgdmFsdWUgPSAnMTMzNyc7XG5cbiAgICAvLyBXSEVOXG4gICAgZXhwZWN0KEZhY3QuZmluZChyZWdpb24sIG5hbWUpKS50b0JlKHVuZGVmaW5lZCk7XG4gICAgZXhwZWN0KCgpID0+IEZhY3QucmVnaXN0ZXIoeyByZWdpb24sIG5hbWUsIHZhbHVlIH0pKS5ub3QudG9UaHJvd0Vycm9yKCk7XG4gICAgZXhwZWN0KEZhY3QuZmluZChyZWdpb24sIG5hbWUpKS50b0JlKHZhbHVlKTtcblxuICAgIC8vIFRIRU5cbiAgICBleHBlY3QoKCkgPT4gRmFjdC5yZWdpc3Rlcih7IHJlZ2lvbiwgbmFtZSwgdmFsdWU6ICdGb28nIH0sIHRydWUpKS5ub3QudG9UaHJvd0Vycm9yKCk7XG4gICAgZXhwZWN0KEZhY3QuZmluZChyZWdpb24sIG5hbWUpKS50b0JlKCdGb28nKTtcblxuICAgIC8vIENsZWFudXBcbiAgICBGYWN0LnVucmVnaXN0ZXIocmVnaW9uLCBuYW1lKTtcbiAgfSk7XG59KTtcbiJdfQ==