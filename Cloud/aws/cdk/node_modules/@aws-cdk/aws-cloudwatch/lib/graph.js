"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cdk = require("@aws-cdk/core");
const widget_1 = require("./widget");
/**
 * Display the metric associated with an alarm, including the alarm line
 */
class AlarmWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'timeSeries',
                    title: this.props.title,
                    region: this.props.region || cdk.Aws.REGION,
                    annotations: {
                        alarms: [this.props.alarm.alarmArn]
                    },
                    yAxis: {
                        left: this.props.leftYAxis !== undefined ? this.props.leftYAxis : undefined
                    }
                }
            }];
    }
}
exports.AlarmWidget = AlarmWidget;
/**
 * A dashboard widget that displays metrics
 */
class GraphWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 6);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'timeSeries',
                    title: this.props.title,
                    region: this.props.region || cdk.Aws.REGION,
                    metrics: (this.props.left || []).map(m => metricJson(m, 'left')).concat((this.props.right || []).map(m => metricJson(m, 'right'))),
                    annotations: {
                        horizontal: (this.props.leftAnnotations || []).map(mapAnnotation('left')).concat((this.props.rightAnnotations || []).map(mapAnnotation('right')))
                    },
                    yAxis: {
                        left: this.props.leftYAxis !== undefined ? this.props.leftYAxis : undefined,
                        right: this.props.rightYAxis !== undefined ? this.props.rightYAxis : undefined,
                    }
                }
            }];
    }
}
exports.GraphWidget = GraphWidget;
/**
 * A dashboard widget that displays the most recent value for every metric
 */
class SingleValueWidget extends widget_1.ConcreteWidget {
    constructor(props) {
        super(props.width || 6, props.height || 3);
        this.props = props;
    }
    toJson() {
        return [{
                type: 'metric',
                width: this.width,
                height: this.height,
                x: this.x,
                y: this.y,
                properties: {
                    view: 'singleValue',
                    title: this.props.title,
                    region: this.props.region || cdk.Aws.REGION,
                    metrics: this.props.metrics.map(m => metricJson(m, 'left'))
                }
            }];
    }
}
exports.SingleValueWidget = SingleValueWidget;
var Shading;
(function (Shading) {
    /**
     * Don't add shading
     */
    Shading["NONE"] = "none";
    /**
     * Add shading above the annotation
     */
    Shading["ABOVE"] = "above";
    /**
     * Add shading below the annotation
     */
    Shading["BELOW"] = "below";
})(Shading = exports.Shading || (exports.Shading = {}));
function mapAnnotation(yAxis) {
    return (a) => {
        return { ...a, yAxis };
    };
}
/**
 * Return the JSON structure which represents this metric in a graph
 *
 * This will be called by GraphWidget, no need for clients to call this.
 */
function metricJson(metric, yAxis) {
    const config = metric.toGraphConfig();
    // Namespace and metric Name
    const ret = [
        config.namespace,
        config.metricName,
    ];
    // Dimensions
    for (const dim of (config.dimensions || [])) {
        ret.push(dim.name, dim.value);
    }
    // Options
    ret.push({
        yAxis,
        label: config.label,
        color: config.color,
        period: config.period,
        stat: config.statistic,
    });
    return ret;
}
//# sourceMappingURL=data:application/json;base64,