"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Statistic to use over the aggregation period
 */
var Statistic;
(function (Statistic) {
    Statistic["SAMPLE_COUNT"] = "SampleCount";
    Statistic["AVERAGE"] = "Average";
    Statistic["SUM"] = "Sum";
    Statistic["MINIMUM"] = "Minimum";
    Statistic["MAXIMUM"] = "Maximum";
})(Statistic = exports.Statistic || (exports.Statistic = {}));
/**
 * Unit for metric
 */
var Unit;
(function (Unit) {
    Unit["SECONDS"] = "Seconds";
    Unit["MICROSECONDS"] = "Microseconds";
    Unit["MILLISECONDS"] = "Milliseconds";
    Unit["BYTES"] = "Bytes";
    Unit["KILOBYTES"] = "Kilobytes";
    Unit["MEGABYTES"] = "Megabytes";
    Unit["GIGABYTES"] = "Gigabytes";
    Unit["TERABYTES"] = "Terabytes";
    Unit["BITS"] = "Bits";
    Unit["KILOBITS"] = "Kilobits";
    Unit["MEGABITS"] = "Megabits";
    Unit["GIGABITS"] = "Gigabits";
    Unit["TERABITS"] = "Terabits";
    Unit["PERCENT"] = "Percent";
    Unit["COUNT"] = "Count";
    Unit["BYTES_PER_SECOND"] = "Bytes/Second";
    Unit["KILOBYTES_PER_SECOND"] = "Kilobytes/Second";
    Unit["MEGABYTES_PER_SECOND"] = "Megabytes/Second";
    Unit["GIGABYTES_PER_SECOND"] = "Gigabytes/Second";
    Unit["TERABYTES_PER_SECOND"] = "Terabytes/Second";
    Unit["BITS_PER_SECOND"] = "Bits/Second";
    Unit["KILOBITS_PER_SECOND"] = "Kilobits/Second";
    Unit["MEGABITS_PER_SECOND"] = "Megabits/Second";
    Unit["GIGABITS_PER_SECOND"] = "Gigabits/Second";
    Unit["TERABITS_PER_SECOND"] = "Terabits/Second";
    Unit["COUNT_PER_SECOND"] = "Count/Second";
    Unit["NONE"] = "None";
})(Unit = exports.Unit || (exports.Unit = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWV0cmljLXR5cGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsibWV0cmljLXR5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBK0JBOztHQUVHO0FBQ0gsSUFBWSxTQU1YO0FBTkQsV0FBWSxTQUFTO0lBQ25CLHlDQUE0QixDQUFBO0lBQzVCLGdDQUFtQixDQUFBO0lBQ25CLHdCQUFXLENBQUE7SUFDWCxnQ0FBbUIsQ0FBQTtJQUNuQixnQ0FBbUIsQ0FBQTtBQUNyQixDQUFDLEVBTlcsU0FBUyxHQUFULGlCQUFTLEtBQVQsaUJBQVMsUUFNcEI7QUFFRDs7R0FFRztBQUNILElBQVksSUE0Qlg7QUE1QkQsV0FBWSxJQUFJO0lBQ2QsMkJBQW1CLENBQUE7SUFDbkIscUNBQTZCLENBQUE7SUFDN0IscUNBQTZCLENBQUE7SUFDN0IsdUJBQWUsQ0FBQTtJQUNmLCtCQUF1QixDQUFBO0lBQ3ZCLCtCQUF1QixDQUFBO0lBQ3ZCLCtCQUF1QixDQUFBO0lBQ3ZCLCtCQUF1QixDQUFBO0lBQ3ZCLHFCQUFhLENBQUE7SUFDYiw2QkFBcUIsQ0FBQTtJQUNyQiw2QkFBcUIsQ0FBQTtJQUNyQiw2QkFBcUIsQ0FBQTtJQUNyQiw2QkFBcUIsQ0FBQTtJQUNyQiwyQkFBbUIsQ0FBQTtJQUNuQix1QkFBZSxDQUFBO0lBQ2YseUNBQWlDLENBQUE7SUFDakMsaURBQXlDLENBQUE7SUFDekMsaURBQXlDLENBQUE7SUFDekMsaURBQXlDLENBQUE7SUFDekMsaURBQXlDLENBQUE7SUFDekMsdUNBQStCLENBQUE7SUFDL0IsK0NBQXVDLENBQUE7SUFDdkMsK0NBQXVDLENBQUE7SUFDdkMsK0NBQXVDLENBQUE7SUFDdkMsK0NBQXVDLENBQUE7SUFDdkMseUNBQWlDLENBQUE7SUFDakMscUJBQWEsQ0FBQTtBQUNmLENBQUMsRUE1QlcsSUFBSSxHQUFKLFlBQUksS0FBSixZQUFJLFFBNEJmIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKipcbiAqIEludGVyZmFjZSBmb3IgbWV0cmljc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIElNZXRyaWMge1xuICAvKipcbiAgICogVHVybiB0aGlzIG1ldHJpYyBvYmplY3QgaW50byBhbiBhbGFybSBjb25maWd1cmF0aW9uXG4gICAqL1xuICB0b0FsYXJtQ29uZmlnKCk6IE1ldHJpY0FsYXJtQ29uZmlnO1xuXG4gIC8qKlxuICAgKiBUdXJuIHRoaXMgbWV0cmljIG9iamVjdCBpbnRvIGEgZ3JhcGggY29uZmlndXJhdGlvblxuICAgKi9cbiAgdG9HcmFwaENvbmZpZygpOiBNZXRyaWNHcmFwaENvbmZpZztcbn1cblxuLyoqXG4gKiBNZXRyaWMgZGltZW5zaW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRGltZW5zaW9uIHtcbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIGRpbWVuc2lvblxuICAgKi9cbiAgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBWYWx1ZSBvZiB0aGUgZGltZW5zaW9uXG4gICAqL1xuICByZWFkb25seSB2YWx1ZTogYW55O1xufVxuXG4vKipcbiAqIFN0YXRpc3RpYyB0byB1c2Ugb3ZlciB0aGUgYWdncmVnYXRpb24gcGVyaW9kXG4gKi9cbmV4cG9ydCBlbnVtIFN0YXRpc3RpYyB7XG4gIFNBTVBMRV9DT1VOVCA9ICdTYW1wbGVDb3VudCcsXG4gIEFWRVJBR0UgPSAnQXZlcmFnZScsXG4gIFNVTSA9ICdTdW0nLFxuICBNSU5JTVVNID0gJ01pbmltdW0nLFxuICBNQVhJTVVNID0gJ01heGltdW0nLFxufVxuXG4vKipcbiAqIFVuaXQgZm9yIG1ldHJpY1xuICovXG5leHBvcnQgZW51bSBVbml0IHtcbiAgU0VDT05EUyA9ICdTZWNvbmRzJyxcbiAgTUlDUk9TRUNPTkRTID0gJ01pY3Jvc2Vjb25kcycsXG4gIE1JTExJU0VDT05EUyA9ICdNaWxsaXNlY29uZHMnLFxuICBCWVRFUyA9ICdCeXRlcycsXG4gIEtJTE9CWVRFUyA9ICdLaWxvYnl0ZXMnLFxuICBNRUdBQllURVMgPSAnTWVnYWJ5dGVzJyxcbiAgR0lHQUJZVEVTID0gJ0dpZ2FieXRlcycsXG4gIFRFUkFCWVRFUyA9ICdUZXJhYnl0ZXMnLFxuICBCSVRTID0gJ0JpdHMnLFxuICBLSUxPQklUUyA9ICdLaWxvYml0cycsXG4gIE1FR0FCSVRTID0gJ01lZ2FiaXRzJyxcbiAgR0lHQUJJVFMgPSAnR2lnYWJpdHMnLFxuICBURVJBQklUUyA9ICdUZXJhYml0cycsXG4gIFBFUkNFTlQgPSAnUGVyY2VudCcsXG4gIENPVU5UID0gJ0NvdW50JyxcbiAgQllURVNfUEVSX1NFQ09ORCA9ICdCeXRlcy9TZWNvbmQnLFxuICBLSUxPQllURVNfUEVSX1NFQ09ORCA9ICdLaWxvYnl0ZXMvU2Vjb25kJyxcbiAgTUVHQUJZVEVTX1BFUl9TRUNPTkQgPSAnTWVnYWJ5dGVzL1NlY29uZCcsXG4gIEdJR0FCWVRFU19QRVJfU0VDT05EID0gJ0dpZ2FieXRlcy9TZWNvbmQnLFxuICBURVJBQllURVNfUEVSX1NFQ09ORCA9ICdUZXJhYnl0ZXMvU2Vjb25kJyxcbiAgQklUU19QRVJfU0VDT05EID0gJ0JpdHMvU2Vjb25kJyxcbiAgS0lMT0JJVFNfUEVSX1NFQ09ORCA9ICdLaWxvYml0cy9TZWNvbmQnLFxuICBNRUdBQklUU19QRVJfU0VDT05EID0gJ01lZ2FiaXRzL1NlY29uZCcsXG4gIEdJR0FCSVRTX1BFUl9TRUNPTkQgPSAnR2lnYWJpdHMvU2Vjb25kJyxcbiAgVEVSQUJJVFNfUEVSX1NFQ09ORCA9ICdUZXJhYml0cy9TZWNvbmQnLFxuICBDT1VOVF9QRVJfU0VDT05EID0gJ0NvdW50L1NlY29uZCcsXG4gIE5PTkUgPSAnTm9uZSdcbn1cblxuLyoqXG4gKiBQcm9wZXJ0aWVzIHVzZWQgdG8gY29uc3RydWN0IHRoZSBNZXRyaWMgaWRlbnRpZnlpbmcgcGFydCBvZiBhbiBBbGFybVxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldHJpY0FsYXJtQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBkaW1lbnNpb25zIHRvIGFwcGx5IHRvIHRoZSBhbGFybVxuICAgKi9cbiAgcmVhZG9ubHkgZGltZW5zaW9ucz86IERpbWVuc2lvbltdO1xuXG4gIC8qKlxuICAgKiBOYW1lc3BhY2Ugb2YgdGhlIG1ldHJpY1xuICAgKi9cbiAgcmVhZG9ubHkgbmFtZXNwYWNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIG1ldHJpY1xuICAgKi9cbiAgcmVhZG9ubHkgbWV0cmljTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBIb3cgbWFueSBzZWNvbmRzIHRvIGFnZ3JlZ2F0ZSBvdmVyXG4gICAqL1xuICByZWFkb25seSBwZXJpb2Q6IG51bWJlcjtcblxuICAvKipcbiAgICogU2ltcGxlIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIHRvIHVzZVxuICAgKi9cbiAgcmVhZG9ubHkgc3RhdGlzdGljPzogU3RhdGlzdGljO1xuXG4gIC8qKlxuICAgKiBQZXJjZW50aWxlIGFnZ3JlZ2F0aW9uIGZ1bmN0aW9uIHRvIHVzZVxuICAgKi9cbiAgcmVhZG9ubHkgZXh0ZW5kZWRTdGF0aXN0aWM/OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSB1bml0IG9mIHRoZSBhbGFybVxuICAgKi9cbiAgcmVhZG9ubHkgdW5pdD86IFVuaXQ7XG59XG5cbi8qKlxuICogUHJvcGVydGllcyB1c2VkIHRvIGNvbnN0cnVjdCB0aGUgTWV0cmljIGlkZW50aWZ5aW5nIHBhcnQgb2YgYSBHcmFwaFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1ldHJpY0dyYXBoQ29uZmlnIHtcbiAgLyoqXG4gICAqIFRoZSBkaW1lbnNpb25zIHRvIGFwcGx5IHRvIHRoZSBhbGFybVxuICAgKi9cbiAgcmVhZG9ubHkgZGltZW5zaW9ucz86IERpbWVuc2lvbltdO1xuXG4gIC8qKlxuICAgKiBOYW1lc3BhY2Ugb2YgdGhlIG1ldHJpY1xuICAgKi9cbiAgcmVhZG9ubHkgbmFtZXNwYWNlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE5hbWUgb2YgdGhlIG1ldHJpY1xuICAgKi9cbiAgcmVhZG9ubHkgbWV0cmljTmFtZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBIb3cgbWFueSBzZWNvbmRzIHRvIGFnZ3JlZ2F0ZSBvdmVyXG4gICAqL1xuICByZWFkb25seSBwZXJpb2Q6IG51bWJlcjtcblxuICAvKipcbiAgICogTGFiZWwgZm9yIHRoZSBtZXRyaWNcbiAgICovXG4gIHJlYWRvbmx5IGxhYmVsPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDb2xvciBmb3IgdGhlIGdyYXBoIGxpbmVcbiAgICovXG4gIHJlYWRvbmx5IGNvbG9yPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBBZ2dyZWdhdGlvbiBmdW5jdGlvbiB0byB1c2UgKGNhbiBiZSBlaXRoZXIgc2ltcGxlIG9yIGEgcGVyY2VudGlsZSlcbiAgICovXG4gIHJlYWRvbmx5IHN0YXRpc3RpYz86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHVuaXQgb2YgdGhlIGFsYXJtXG4gICAqL1xuICByZWFkb25seSB1bml0PzogVW5pdDtcbn0iXX0=