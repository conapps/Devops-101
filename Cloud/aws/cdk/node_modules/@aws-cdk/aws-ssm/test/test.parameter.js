"use strict";
const assert_1 = require("@aws-cdk/assert");
const cdk = require("@aws-cdk/core");
const core_1 = require("@aws-cdk/core");
const ssm = require("../lib");
module.exports = {
    'creating a String SSM Parameter'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new ssm.StringParameter(stack, 'Parameter', {
            allowedPattern: '.*',
            description: 'The value Foo',
            parameterName: 'FooParameter',
            stringValue: 'Foo',
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SSM::Parameter', {
            AllowedPattern: '.*',
            Description: 'The value Foo',
            Name: 'FooParameter',
            Type: 'String',
            Value: 'Foo',
        }));
        test.done();
    },
    'String SSM Parameter rejects invalid values'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.throws(() => new ssm.StringParameter(stack, 'Parameter', { allowedPattern: '^Bar$', stringValue: 'FooBar' }), /does not match the specified allowedPattern/);
        test.done();
    },
    'String SSM Parameter allows unresolved tokens'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.doesNotThrow(() => {
            new ssm.StringParameter(stack, 'Parameter', {
                allowedPattern: '^Bar$',
                stringValue: cdk.Lazy.stringValue({ produce: () => 'Foo!' }),
            });
        });
        test.done();
    },
    'creating a StringList SSM Parameter'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // WHEN
        new ssm.StringListParameter(stack, 'Parameter', {
            allowedPattern: '(Foo|Bar)',
            description: 'The values Foo and Bar',
            parameterName: 'FooParameter',
            stringListValue: ['Foo', 'Bar'],
        });
        // THEN
        assert_1.expect(stack).to(assert_1.haveResource('AWS::SSM::Parameter', {
            AllowedPattern: '(Foo|Bar)',
            Description: 'The values Foo and Bar',
            Name: 'FooParameter',
            Type: 'StringList',
            Value: 'Foo,Bar',
        }));
        test.done();
    },
    'StringList SSM Parameter values cannot contain commas'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.throws(() => new ssm.StringListParameter(stack, 'Parameter', { stringListValue: ['Foo,Bar'] }), /cannot contain the ',' character/);
        test.done();
    },
    'StringList SSM Parameter rejects invalid values'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.throws(() => new ssm.StringListParameter(stack, 'Parameter', { allowedPattern: '^(Foo|Bar)$', stringListValue: ['Foo', 'FooBar'] }), /does not match the specified allowedPattern/);
        test.done();
    },
    'StringList SSM Parameter allows unresolved tokens'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        // THEN
        test.doesNotThrow(() => new ssm.StringListParameter(stack, 'Parameter', {
            allowedPattern: '^(Foo|Bar)$',
            stringListValue: ['Foo', cdk.Lazy.stringValue({ produce: () => 'Baz!' })],
        }));
        test.done();
    },
    'parameterArn is crafted correctly'(test) {
        // GIVEN
        const stack = new cdk.Stack();
        const param = new ssm.StringParameter(stack, 'Parameter', { stringValue: 'Foo' });
        // THEN
        test.deepEqual(stack.resolve(param.parameterArn), {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':ssm:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':parameter',
                    { Ref: 'Parameter9E1B4FBA' }
                ]]
        });
        test.done();
    },
    'StringParameter.fromStringParameterName'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const param = ssm.StringParameter.fromStringParameterName(stack, 'MyParamName', 'MyParamName');
        // THEN
        test.deepEqual(stack.resolve(param.parameterArn), {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':ssm:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':parameterMyParamName'
                ]]
        });
        test.deepEqual(stack.resolve(param.parameterName), 'MyParamName');
        test.deepEqual(stack.resolve(param.parameterType), 'String');
        test.deepEqual(stack.resolve(param.stringValue), { Ref: 'MyParamNameParameter' });
        assert_1.expect(stack).toMatch({
            Parameters: {
                MyParamNameParameter: {
                    Type: "AWS::SSM::Parameter::Value<String>",
                    Default: "MyParamName"
                }
            }
        });
        test.done();
    },
    'StringParameter.fromStringParameterAttributes'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const param = ssm.StringParameter.fromStringParameterAttributes(stack, 'MyParamName', {
            parameterName: 'MyParamName',
            version: 2
        });
        // THEN
        test.deepEqual(stack.resolve(param.parameterArn), {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':ssm:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':parameterMyParamName'
                ]]
        });
        test.deepEqual(stack.resolve(param.parameterName), 'MyParamName');
        test.deepEqual(stack.resolve(param.parameterType), 'String');
        test.deepEqual(stack.resolve(param.stringValue), '{{resolve:ssm:MyParamName:2}}');
        test.done();
    },
    'StringListParameter.fromName'(test) {
        // GIVEN
        const stack = new core_1.Stack();
        // WHEN
        const param = ssm.StringListParameter.fromStringListParameterName(stack, 'MyParamName', 'MyParamName');
        // THEN
        test.deepEqual(stack.resolve(param.parameterArn), {
            'Fn::Join': ['', [
                    'arn:',
                    { Ref: 'AWS::Partition' },
                    ':ssm:',
                    { Ref: 'AWS::Region' },
                    ':',
                    { Ref: 'AWS::AccountId' },
                    ':parameterMyParamName'
                ]]
        });
        test.deepEqual(stack.resolve(param.parameterName), 'MyParamName');
        test.deepEqual(stack.resolve(param.parameterType), 'StringList');
        test.deepEqual(stack.resolve(param.stringListValue), { 'Fn::Split': [',', '{{resolve:ssm:MyParamName}}'] });
        test.done();
    },
    'fromLookup will use the SSM context provider to read value during synthesis'(test) {
        // GIVEN
        const app = new core_1.App();
        const stack = new core_1.Stack(app, 'my-staq', { env: { region: 'us-east-1', account: '12344' } });
        // WHEN
        const value = ssm.StringParameter.valueFromLookup(stack, 'my-param-name');
        // THEN
        test.deepEqual(value, 'dummy-value-for-my-param-name');
        test.deepEqual(app.synth().manifest.missing, [
            {
                key: 'ssm:account=12344:parameterName=my-param-name:region=us-east-1',
                props: {
                    account: '12344',
                    region: 'us-east-1',
                    parameterName: 'my-param-name'
                },
                provider: 'ssm'
            }
        ]);
        test.done();
    },
    'valueForStringParameter': {
        'returns a token that represents the SSM parameter value'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            const value = ssm.StringParameter.valueForStringParameter(stack, 'my-param-name');
            // THEN
            assert_1.expect(stack).toMatch({
                Parameters: {
                    SsmParameterValuemyparamnameC96584B6F00A464EAD1953AFF4B05118Parameter: {
                        Type: "AWS::SSM::Parameter::Value<String>",
                        Default: "my-param-name"
                    }
                }
            });
            test.deepEqual(stack.resolve(value), { Ref: 'SsmParameterValuemyparamnameC96584B6F00A464EAD1953AFF4B05118Parameter' });
            test.done();
        },
        'de-dup based on parameter name'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            ssm.StringParameter.valueForStringParameter(stack, 'my-param-name');
            ssm.StringParameter.valueForStringParameter(stack, 'my-param-name');
            ssm.StringParameter.valueForStringParameter(stack, 'my-param-name-2');
            ssm.StringParameter.valueForStringParameter(stack, 'my-param-name');
            // THEN
            assert_1.expect(stack).toMatch({
                Parameters: {
                    SsmParameterValuemyparamnameC96584B6F00A464EAD1953AFF4B05118Parameter: {
                        Type: "AWS::SSM::Parameter::Value<String>",
                        Default: "my-param-name"
                    },
                    SsmParameterValuemyparamname2C96584B6F00A464EAD1953AFF4B05118Parameter: {
                        Type: "AWS::SSM::Parameter::Value<String>",
                        Default: "my-param-name-2"
                    }
                }
            });
            test.done();
        },
        'can query actual SSM Parameter Names, multiple times'(test) {
            // GIVEN
            const stack = new core_1.Stack();
            // WHEN
            ssm.StringParameter.valueForStringParameter(stack, '/my/param/name');
            ssm.StringParameter.valueForStringParameter(stack, '/my/param/name');
            test.done();
        },
    }
};
//# sourceMappingURL=data:application/json;base64,